// Copyright 2024 Gaocheng Ran <rangaocheng@outlook.com>

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#define REGISTER_ENUM_PROPERTY(varName, enumName, reflectName, flag) \
{ \
    activeProperty = std::move(NoelleGraphic::PropertyCreator::CreateEnumProperty( \
        dummyPtr->varName, _T(#reflectName), _T(#enumName), ms_Type, \
        flag, (size_t)((char*)&(dummyPtr->varName) - (char*)dummyPtr))); \
    pType->AddProperty(std::move(activeProperty)); \
}

#define REGISTER_PROPERTY_DATA(varName, varNumName, reflectName) \
{ \
    activeProperty = std::move(NoelleGraphic::PropertyCreator::GetAutoPropertyCreator( \
        dummyPtr->varName, dummyPtr->varNumName).CreateProperty( \
            ms_Type, _T(#reflectName), \
            (size_t)((char*)&(dummyPtr->varName) - (char*)dummyPtr), \
            (size_t)((char*)&(dummyPtr->varNumName) - (char*)dummyPtr))); \
    pType->AddProperty(std::move(activeProperty)); \
}

#define REGISTER_PROPERTY_FIXED_DATA(varName, Num, reflectName, bDynamicCreate) \
{ \
    unsigned int NumType = 0; \
    activeProperty = std::move(NoelleGraphic::PropertyCreator::GetAutoPropertyCreator( \
        dummyPtr->varName, NumType).CreateProperty( \
            ms_Type, _T(#reflectName), \
            (size_t)((char*)&(dummyPtr->varName) - (char*)dummyPtr), \
            bDynamicCreate, Num)); \
    pType->AddProperty(std::move(activeProperty)); \
}

#define REGISTER_PROPERTY(varName, reflectName, flag) \
{ \
    activeProperty = std::move(NoelleGraphic::PropertyCreator::GetAutoPropertyCreator( \
        dummyPtr->varName).CreateProperty( \
            ms_Type, _T(#reflectName), \
            flag, (size_t)((char*)&(dummyPtr->varName) - (char*)dummyPtr))); \
    pType->AddProperty(std::move(activeProperty)); \
}

#define REGISTER_PROPERTY_RANGE(varName, reflectName, High, Low, Step, flag) \
{ \
    activeProperty = std::move(NoelleGraphic::PropertyCreator::GetAutoPropertyCreator( \
        dummyPtr->varName).CreateProperty( \
             ms_Type, _T(#reflectName) \
             flag, (size_t)((char*)&(dummyPtr->varName) - (char*)dummyPtr), Low, High, Step)); \
    pType->AddProperty(std::move(activeProperty)); \
}
